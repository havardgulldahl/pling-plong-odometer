# use nginx as a reverse proxy
# /etc/nginx/sites-enabled/odometer
server {
    listen 80;
    client_max_body_size 4G;
    server_name <<SERVERNAME>>

    location / {
      proxy_set_header Host $http_host;
      proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
      proxy_redirect off;
      proxy_buffering off;
      proxy_pass http://odometer;
    }

    location /static {
      # path for static files
      root <<STATICPATH>>
    }

  }

  upstream odometer {
    # fail_timeout=0 means we always retry an upstream even if it failed
    # to return a good HTTP response

    # Unix domain servers
    #server unix:/tmp/odometer_1.sock fail_timeout=0;
    #server unix:/tmp/odometer_2.sock fail_timeout=0;

    # Unix domain sockets are used in this example due to their high performance,
    # but TCP/IP sockets could be used instead:
    # 
    # delegate to two instances
    # look at systemd-socket@.service for how to boot it up
    #
    server 127.0.0.1:8081 fail_timeout=0;
    server 127.0.0.1:8082 fail_timeout=0;

    # server 127.0.0.1:8083 fail_timeout=0;
    # server 127.0.0.1:8084 fail_timeout=0;
}